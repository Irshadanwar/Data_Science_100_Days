üóÇÔ∏è Module 1: Python Basics

üåü Milestone Topics:
The aim of this module is to build a solid foundation in Python programming. By the end of Day 3, you‚Äôll be comfortable with the basics of Python syntax, data types, control flow, and functions.

üìÖ Timeline: Day 1 - 3
Day	Topics Covered	Tasks & Exercises
Day 1	Introduction to Python:	
- Installing Python and Setting up the Environment (e.g., Jupyter, VS Code, Colab)	Task: Write and run your first Python program (e.g., "Hello, World!").
- Python Syntax and Code Structure	Exercise: Write simple print statements and test indentation rules.
- Variables and Data Types (Integers, Floats, Strings, Booleans)	Task: Declare variables and perform basic arithmetic; concatenate strings.
- Input/Output	Task: Write a program to take user input and display it.
Day 2	Control Flow and Conditional Statements:	
- Python If-Else Conditions	Exercise: Write a program to determine if a number is even or odd.
- Loops (For, While)	Task: Create a multiplication table using loops.
- Break, Continue, and Pass Statements	Task: Write a program to iterate through a list and skip specific elements using continue.
- Nested Loops	Exercise: Create a pattern using nested loops (e.g., a pyramid).
Day 3	Functions and Intro to Data Structures:	
- Defining and Calling Functions	Task: Create a function to calculate the factorial of a number.
- Function Arguments (Positional, Default, Keyword, Arbitrary)	Exercise: Write a program that uses a function with default parameters.
- Lists (Basics: Creation, Indexing, and Slicing)	Task: Create a list of numbers and find the sum using a loop.
- Strings (Basics: Creation, Indexing, and Basic Methods)	Task: Reverse a string using slicing.
- Introduction to Error Handling (try-except)	Exercise: Write a program to handle divide-by-zero errors.
Module Goals
Gain confidence in writing basic Python programs.
Understand how to use control flow and loops effectively.
Get comfortable with basic data structures like lists and strings.
Begin modular programming by creating reusable functions.
